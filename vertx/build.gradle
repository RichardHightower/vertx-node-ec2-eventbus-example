buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.0.0-beta-4584'
        classpath 'se.transmode.gradle:gradle-docker:1.2'
    }
}

plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '1.2.2'
    id 'idea'
}

apply plugin: "kotlin"
apply plugin: 'docker'


group 'advantageous'
version '1.0'

docker {
    baseImage "vertx/vertx3-exec"
    maintainer 'Rick Hightower "richardhightower@gmail.com"'



}

task buildDocker(type: Docker) {

        tagVersion = System.getenv("BUILD_NUMBER") ?: project.version
        push = Boolean.getBoolean("docker.push")
        applicationName = "vertx-node-eventbus-example"

        addFile {
            from "${project.shadowJar.outputs.files.singleFile}"
            into "/opt/hello/"
        }
        exposePort 8080
        entryPoint = ["sh",  "-c"]
        defaultCommand = ["java -jar /opt/hello/${project.name}-${project.version}-fat.jar"]

}

sourceSets {
    generated{
        java.srcDir "${projectDir}/src/generated/java"
    }
}


idea {
    project {
        languageLevel = '1.8'
    }
}
repositories {
    mavenCentral()
    maven {
        url = 'http://oss.sonatype.org/content/repositories/snapshots/'
    }
    mavenLocal() /* Just in case we want to use local artifacts that we build locally. */
}

sourceCompatibility = '1.8'
mainClassName = 'io.vertx.core.Launcher'

dependencies {
    compile "io.vertx:vertx-core:3.2.0"
    compile 'ch.qos.logback:logback-core:1.1.3'
    compile 'ch.qos.logback:logback-classic:1.1.3'
    compile 'org.slf4j:slf4j-api:1.7.12'
    compile 'org.jetbrains.kotlin:kotlin-stdlib:1.0.0-beta-4584'
    compile 'io.vertx:vertx-tcp-eventbus-bridge:3.2.0'
    compile 'io.vertx:vertx-web:3.2.0'
    compile 'io.vertx:vertx-service-proxy:3.2.0'
    compile 'io.vertx:vertx-lang-js:3.2.0'
    compile 'io.vertx:vertx-codegen:3.2.0'
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

/* used to create the fat jar files. */
shadowJar {
    classifier = 'fat'
    manifest {
        attributes 'Main-Verticle': 'com.github.vertx.node.example.MainVerticle'
    }
    mergeServiceFiles {
        include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.9'
}


task generateProxies(type: JavaCompile, group: 'build', description: 'Generates the Vertx proxies') {
    source = sourceSets.main.java // input source set
    classpath = configurations.compile //+ configurations.vertx // add processor module to classpath
    // specify javac arguments
    options.compilerArgs = [
            "-proc:only",
            "-processor", "io.vertx.codegen.CodeGenProcessor", // vertx processor here
            "-AoutputDirectory=${projectDir}/src/main"
    ]
    // specify output of generated code
    destinationDir = file("${projectDir}/src/generated/java")
}


compileJava{
    dependsOn(generateProxies)
    source    += sourceSets.generated.java
    // specify javac arguments
    options.compilerArgs = [
            "-Acodetrans.output=${projectDir}/src/main"
    ]
}